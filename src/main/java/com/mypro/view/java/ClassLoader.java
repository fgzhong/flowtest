package com.mypro.view.java;

/**
 * @author fgzhong
 * @description: 类加载
 * @since 2019/6/30
 */
public class ClassLoader {

    /*
      1、类加载器：
        1、负责读取Java字节代码，并转换为java.lang.Class类的一个实例
        2、判断类在java虚拟机的唯一性
           1、判断两个类是否相同，前提是这两个类被同一类加载器加载
              1、相同包括class .equals(),.isAssignableFrom(),
                 .isInstance(),instanceof
      2、种类
        1、启动类加载器：加载JACA_HOME\lib，或者被-Xbootclasspath参数限定的类
        2、扩展类加载器：加载\lib\ext，或者被java.ext.dirs系统变量指定的类
        3、应用程序类加载器：加载ClassPath中的类库
        4、自定义类加载器：加载我们的自定义类
        5、  4 -> 3 -> 2 -> 1

      3、双亲委派模型
        1、：每次收到类加载请求时，先将请求委派给
            父类加载器(最终交由启动类加载器尝试加载)，
            如果父类加载器无法加载，则子类尝试加载
        2、好处
          1、避免同一类被多次加载
          2、每个加载器只能加载自己范围内的类

      4、加载过程
        1、加载 -> 验证 -> 准备 -> 解析 -> 初始化 -> 使用 -> 卸载
        2、加载：
          1、通过类名获取此定义的二进制字节流
          2、将字节流代表的静态存储结构转化为方法区的运行时的数据结构
          3、在内存中生成代表这个类的class对象，作为方法区这个类数据访问的入口
        3、连接
          1、验证：保证class文件包含的信息符合当前虚拟机要求且不会危害虚拟机自身安全
            1、文件格式验证
            2、元数据验证
            3、字节码验证
            4、符号引用验证
          2、准备：为类中的所有静态变量分配内存空间，并为其设置一个初始值(当为final字段时，)，这些变量所使用的内存都将在方法区中进行分配
          3、解析：将常量池内的符号引用替换为直接引用的过程
        4、初始化：根据程序员自己写的逻辑去初始化类变量和其他资源
          1、所有类变量初始化语句和静态代码块都会在编译时被前端编译器放在收集器里头，存放到一个特殊的方法中；
            类/接口初始化方法——<clinit>方法；只能在类加载的过程中由JVM调用
          2、编译器收集的顺序是由语句在源文件中出现的顺序所决定的，静态语句块中只能访问到定义在静态语句块之前的变量；
          3、如果超类还没有被初始化，那么优先对超类初始化。JVM负责保证一个类的<clinit>方法执行之前，它的超类<clinit>方法已经被执行。
          4、JVM必须确保一个类在初始化的过程中，仅仅只能允许其中一个线程对其执行初始化操作
      5、何时初始化
        1、为一个类型创建一个新的对象实例时（比如new、反射、序列化）
        2、调用一个类型的静态方法时
        3、调用一个类型或接口的静态字段(常量在编译阶段会存入调用类的常量池中，
          本质上并没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化)，或者对这些静态字段执行赋值操作时
        4、初始化一个类的子类时
        5、JVM启动包含main方法的启动类时

      6、class何时被回收
        1、该类所有的实例都已经被GC
        2、加载该类的ClassLoader已经被GC
        3、该类的java.lang.Class 对象没有在任何地方被引用，如不能在任何地方通过反射访问该类的方法
        4、热部署实现：
          1、销毁自定义classloader(被该加载器加载的class也会自动卸载)
          2、更新class
          3、使用新的ClassLoader去加载class

      7、对象的内存结构
        1、对象头（Header）
          1、对象自身的运行时数据：哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳
          2、类型指针：对象指向它的类元数据的指针
        2、实例数据
        3、对齐填充
    */

}
